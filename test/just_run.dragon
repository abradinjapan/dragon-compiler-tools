[ compile, install and run program ]
tools.just_run(sources !dragon.list, test_name !dragon.buffer)() = {
    [ get buffer of buffers ]
    dragon.list.calculate.content_buffer(sources)(sources.buffer)

    [ print debug info ]
    dragon.set("Testing: ")(message)
    dragon.print.buffer_as_string(message)()
    dragon.print.buffer_as_string(test_name)()
    dragon.print.new_line()()

    [ compile ]
    dragon.compiler.compile(sources.buffer, dragon.true, dragon.false, dragon.true)(byte_code, debug_information, error.occured, error.message, error.location.file_index, error.location.line_number, error.location.character_index)

    [ check for compilation error ]
    @print_compilation_error error.occured = {
        dragon.print.buffer_as_string(error.message)()
        dragon.print.new_line()()
        dragon.print.integer.unsigned(error.location.file_index)()
        dragon.print.new_line()()
        dragon.print.integer.unsigned(error.location.line_number)()
        dragon.print.new_line()()
        dragon.print.integer.unsigned(error.location.character_index)()
        dragon.print.new_line()()
        dragon.jump(dragon.always, @exit)()
    }

    [ open new context & install ]
    dragon.context.open()(context)
    dragon.context.install_program(context, byte_code)()

    [ run context ]
    dragon.set(dragon.integer.n1)(instruction_count)
    dragon.context.run(context, instruction_count)()

    [ clean up context ]
    dragon.buffer.return(context)()

    [ clean up program ]
    dragon.buffer.return(byte_code)()

    [ exit ]
    @exit
}
