[ entry point ]
dragon.main()() = {
    [ test conversions ]
    dragon.main.test.conversions()()
}

[ test conversions ]
dragon.main.test.conversions()() = {
    [ setup strings ]
    dragon.set("Conversion Results: [ ")(header)
    dragon.set(", ")(separator)
    dragon.set(" ]")(footer)

    [ setup bases ]
    dragon.set(dragon.integer.2)(base_2)
    dragon.set(dragon.integer.10)(base_10)
    dragon.set(dragon.integer.16)(base_16)

    [ setup value ]
    dragon.set(dragon.integer.123456)(value)

    [ calculate results ]
    tools.cast.calculate.digit_count(base_2, value)(base_2.count)
    tools.cast.calculate.digit_count(base_10, value)(base_10.count)
    tools.cast.calculate.digit_count(base_16, value)(base_16.count)

    [ print results ]
    dragon.print.buffer_as_string(header)()
    dragon.print.integer.unsigned(base_2.count)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.integer.unsigned(base_10.count)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.integer.unsigned(base_16.count)()
    dragon.print.buffer_as_string(footer)()
    dragon.print.new_line()()

    [ test cell to binary ]
    tools.cast.cell_to_binary_string.lower_to_higher(value)(string)
    dragon.print.buffer_as_string(string)()
    dragon.print.new_line()()
    dragon.buffer.return(string)()
    tools.cast.cell_to_binary_string.higher_to_lower(value)(string)
    dragon.print.buffer_as_string(string)()
    dragon.print.new_line()()
    dragon.buffer.return(string)()

    [ test cell to decimal ]
    tools.cast.cell_to_decimal_string.lower_to_higher(value)(string)
    dragon.print.buffer_as_string(string)()
    dragon.print.new_line()()
    dragon.buffer.return(string)()
    tools.cast.cell_to_decimal_string.higher_to_lower(value)(string)
    dragon.print.buffer_as_string(string)()
    dragon.print.new_line()()
    dragon.buffer.return(string)()

    [ test cell to hex ]
    tools.cast.cell_to_hex_string.lower_to_higher(value)(string)
    dragon.print.buffer_as_string(string)()
    dragon.print.new_line()()
    dragon.buffer.return(string)()
    tools.cast.cell_to_hex_string.higher_to_lower(value)(string)
    dragon.print.buffer_as_string(string)()
    dragon.print.new_line()()
    dragon.buffer.return(string)()
}
