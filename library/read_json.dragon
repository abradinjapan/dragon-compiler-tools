[
    Compile
]
[ master type ]
!tools.json
(
    [ translated data ]
    head_object !dragon.cell [ type TODO ]
)

[ translation data ]
!tools.json.workspace
(
    [ defines ]
    lexling.types !tools.json.lexling.types,

    [ error data ]
    error !tools.json.error,

    [ lexing data ]
    current_character !dragon.current,
    lexlings !tools.json.lexlings
)

[ json compile error ]
!tools.json.error
(
    occured !dragon.cell,
    message !dragon.buffer,
    location !tools.json.lexling.location
)

[ compile ]
tools.json.compile(text !dragon.buffer)() = {
    [ setup json ]
    dragon.pack.null()(json !tools.json)

    [ setup workspace ]
    dragon.pack.null()(workspace !tools.json.workspace)
    dragon.pack(text, text:start)(workspace:current_character !dragon.current)
    tools.json.lexling.types.setup()(workspace:lexling.types)

    [ lex ]
    tools.json.compile.lex(json, workspace)(json, workspace)
}



[
    Lexing
]
[ lexlings type ]
!tools.json.lexlings
(
    list !dragon.list, [ !tools.json.lexling ]
    count !dragon.cell
)

[ lexling type ]
!tools.json.lexling
(
    raw !dragon.buffer,
    type !dragon.cell,
    location !tools.json.lexling.location
)

[ print lexling ]
tools.json.lexling.print(lexling !tools.json.lexling)() = {
    [ setup strings ]
    dragon.set("[ ")(header)
    dragon.set(", ")(separator)
    dragon.set(" ]")(footer)

    [ print data ]
    dragon.print.buffer_as_string(header)()
    dragon.print.buffer_as_string(lexling:raw)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.debug_cell(lexling:type)()
    dragon.print.buffer_as_string(footer)()
}

[ lexling location ]
!tools.json.lexling.location
(
    file_index !dragon.cell,
    line_index !dragon.cell,
    character_index !dragon.cell
)

[ lexling type structure ]
!tools.json.lexling.types
(
    invalid !dragon.cell,
    left_square_bracket !dragon.cell,
    right_square_bracket !dragon.cell,
    left_curly_bracket !dragon.cell,
    right_curly_bracket !dragon.cell,
    string !dragon.cell,
    integer !dragon.cell,
    comma !dragon.cell,
    end_of_file !dragon.cell
)

[ setup json lexling type structure ]
tools.json.lexling.types.setup()(types !tools.json.lexling.types) = {
    [ set values ]
    dragon.set(dragon.integer.0)(types:invalid)
    dragon.set(dragon.integer.1)(types:left_square_bracket)
    dragon.set(dragon.integer.2)(types:right_square_bracket)
    dragon.set(dragon.integer.3)(types:left_curly_bracket)
    dragon.set(dragon.integer.4)(types:right_curly_bracket)
    dragon.set(dragon.integer.5)(types:string)
    dragon.set(dragon.integer.6)(types:integer)
    dragon.set(dragon.integer.7)(types:comma)
    dragon.set(dragon.integer.8)(types:end_of_file)
}

[ lex json ]
tools.json.compile.lex(json !tools.json, workspace !tools.json.workspace)(json !tools.json, workspace !tools.json.workspace) = {
    [ setup data ]
    dragon.set(dragon.integer.32)(whitespace.range.end)
    dragon.pack(dragon.constant.0, whitespace.range.end)(whitespace !dragon.buffer)
    dragon.set(dragon.hexadecimal.7B)(left_curly_bracket)
    dragon.set(dragon.hexadecimal.7D)(right_curly_bracket)
    dragon.set(dragon.hexadecimal.5B)(left_square_bracket)
    dragon.set(dragon.hexadecimal.5D)(right_square_bracket)

    [ setup loop start ]
    @lexing.loop.start

    [ check if current is in range ]
    dragon.current.within_range(workspace:current_character, dragon.always)(should_quit)
    dragon.jump(should_quit, @lexing.loop.end)()

    [ get character ]
    dragon.address_to_cell(workspace:current_character:progress, dragon.constant.1)(character, advancement)

    [ if whitespace, go back to beginning ]
    dragon.integer.within_range(whitespace:start, character, whitespace:end, dragon.never)(whitespace_detected)
    @whitespace whitespace_detected = {
        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ jump ]
        dragon.jump(whitespace_detected, @lexing.loop.start)()
    }

    [ otherwise, detect lexling ]
    [ detect left_curly_bracket ]
    dragon.integer.within_range(left_curly_bracket, character, left_curly_bracket, dragon.never)(detected)
    @check.left_curly_bracket detected = {
        [ create lexling ]
        dragon.pack(workspace:current_character:progress, workspace:current_character:progress)(text !dragon.buffer)
        dragon.pack.null()(location !tools.json.lexling.location)
        dragon.pack(text, workspace:lexling.types:left_curly_bracket, location)(lexling !tools.json.lexling)

        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ print lexling ]
        tools.json.lexling.print(lexling)()
        dragon.print.new_line()()

        [ jump to loop start ]
        dragon.jump(dragon.always, @lexing.loop.start)()
    }

    [ detect right_curly_bracket ]
    dragon.integer.within_range(right_curly_bracket, character, right_curly_bracket, dragon.never)(detected)
    @check.right_curly_bracket detected = {
        [ create lexling ]
        dragon.pack(workspace:current_character:progress, workspace:current_character:progress)(text !dragon.buffer)
        dragon.pack.null()(location !tools.json.lexling.location)
        dragon.pack(text, workspace:lexling.types:right_curly_bracket, location)(lexling !tools.json.lexling)

        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ print lexling ]
        tools.json.lexling.print(lexling)()
        dragon.print.new_line()()

        [ jump to loop start ]
        dragon.jump(dragon.always, @lexing.loop.start)()
    }

    [ setup lexing loop end ]
    @lexing.loop.end
}
