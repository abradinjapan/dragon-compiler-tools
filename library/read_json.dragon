[
    Compile
]
[ master type ]
!tools.json
(
    [ translated data ]
    nodes !dragon.cell [ type TODO ]
)

[ translation data ]
!tools.json.workspace
(
    [ defines ]
    lexling.types !tools.json.lexling.types,
    [ parsling.types !tools.json.parsling.types, ]

    [ error data ]
    error !tools.error,

    [ lexing data ]
    current_character !dragon.current,
    lexlings !tools.json.lexlings,

    [ parsing data ]
    current_lexling !dragon.current
    [ parslings !tools.json.parslings ]
)

[ compile ]
tools.json.compile(text !dragon.buffer, verbose !dragon.cell)(error !tools.error) = {
    [ setup json ]
    dragon.pack.null()(json !tools.json)

    [ setup workspace ]
    dragon.pack.null()(workspace !tools.json.workspace)
    dragon.pack(text, text:start)(workspace:current_character !dragon.current)
    tools.json.lexling.types.setup()(workspace:lexling.types)

    [ lex ]
    tools.json.compile.lex(json, workspace)(json, workspace)
    @verbose.lexlings verbose = {
        tools.json.compile.lex.print(workspace)()
    }

    [ exit compilation ]
    @compilation.exit

    [ setup output ]
    dragon.copy(workspace:error)(error)
}

[ setup error for json reader ]
tools.json.compile.raise_error(workspace !tools.json.workspace, message !dragon.buffer)(workspace !tools.json.workspace) = {
    [ setup strings ]
    dragon.set("%22;error%22;: %22;{%0A;%09;%22;occured%22;: true,%0A;%09;%22;message%22;: %22;")(header)
    dragon.set("%22;%0A;}%0A;")(footer)

    [ open list ]
    dragon.set(dragon.integer.1024)(increase)
    dragon.copy(dragon.true)(workspace:error:occured)
    dragon.list.open(increase)(workspace:error:json)

    [ create error json ]
    dragon.list.append.buffer(workspace:error:json, header)() [ append header ]
    dragon.list.append.buffer(workspace:error:json, message)() [ append message ]
    dragon.list.append.buffer(workspace:error:json, footer)() [ append footer ]
}



[
    Lexing
]
[ lexlings type ]
!tools.json.lexlings
(
    list !dragon.list [ !tools.json.lexling ]
)

[ open lexlings ]
tools.json.lexlings.open()(lexlings !tools.json.lexlings) = {
    [ create dummy lexling ]
    dragon.pack.null()(lexling.dummy !tools.json.lexling)

    [ calculate current ]
    dragon.set(dragon.integer.1024)(increase)
    dragon.structure.byte_size(lexling.dummy)(lexling.size)
    dragon.integer.multiply(increase, lexling.size)(increase)

    [ open list ]
    dragon.list.open(increase)(lexlings:list)
}

[ close lexlings ]
tools.json.lexlings.close(lexlings !tools.json.lexlings)() = {
    [ close list ]
    dragon.list.close(lexlings:list)()
}

[ print lexlings ]
tools.json.lexlings.print(lexlings !tools.json.lexlings)() = {
    [ TODO ]
}

[ lexling type ]
!tools.json.lexling
(
    raw !dragon.buffer,
    type !dragon.cell,
    location !tools.text.location
)

[ print lexling ]
tools.json.lexling.print(lexling !tools.json.lexling)() = {
    [ setup strings ]
    dragon.set("[ ")(header)
    dragon.set(", ")(separator)
    dragon.set(" ]")(footer)

    [ print data ]
    dragon.print.buffer_as_string(header)()
    dragon.print.debug_cell(lexling:type)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.buffer_as_string(lexling:raw)()
    dragon.print.buffer_as_string(footer)()
}

[ lexling location ]
!tools.text.location
(
    file_index !dragon.cell,
    line_index !dragon.cell,
    character_index !dragon.cell
)

[ lexling type structure ]
!tools.json.lexling.types
(
    invalid !dragon.cell,
    left_square_bracket !dragon.cell,
    right_square_bracket !dragon.cell,
    left_curly_bracket !dragon.cell,
    right_curly_bracket !dragon.cell,
    string !dragon.cell,
    integer !dragon.cell,
    comma !dragon.cell,
    colon !dragon.cell,
    end_of_file !dragon.cell
)

[ setup json lexling type structure ]
tools.json.lexling.types.setup()(types !tools.json.lexling.types) = {
    [ set values ]
    dragon.set(dragon.integer.0)(types:invalid)
    dragon.set(dragon.integer.1)(types:left_square_bracket)
    dragon.set(dragon.integer.2)(types:right_square_bracket)
    dragon.set(dragon.integer.3)(types:left_curly_bracket)
    dragon.set(dragon.integer.4)(types:right_curly_bracket)
    dragon.set(dragon.integer.5)(types:string)
    dragon.set(dragon.integer.6)(types:integer)
    dragon.set(dragon.integer.7)(types:comma)
    dragon.set(dragon.integer.8)(types:colon)
    dragon.set(dragon.integer.9)(types:end_of_file)
}

[ lex json ]
tools.json.compile.lex(json !tools.json, workspace !tools.json.workspace)(json !tools.json, workspace !tools.json.workspace) = {
    [ setup data ]
    dragon.set(dragon.integer.32)(whitespace.range.end)
    dragon.pack(dragon.constant.0, whitespace.range.end)(whitespace !dragon.buffer)
    dragon.set(dragon.hexadecimal.7B)(left_curly_bracket)
    dragon.set(dragon.hexadecimal.7D)(right_curly_bracket)
    dragon.set(dragon.hexadecimal.5B)(left_square_bracket)
    dragon.set(dragon.hexadecimal.5D)(right_square_bracket)
    dragon.set(dragon.hexadecimal.22)(double_quote)
    dragon.set(dragon.hexadecimal.2C)(comma)
    dragon.set(dragon.hexadecimal.3A)(colon)
    dragon.set(dragon.hexadecimal.30)(decimal_digits.start)
    dragon.set(dragon.hexadecimal.39)(decimal_digits.end)
    dragon.pack.null()(null_location !tools.text.location)

    [ open lexlings ]
    tools.json.lexlings.open()(workspace:lexlings)

    [ setup loop start ]
    @lexing.loop.start

    [ check if current is in range ]
    dragon.current.within_range(workspace:current_character, dragon.always)(should_quit)
    dragon.jump(should_quit, @lexing.loop.exit)()

    [ get character ]
    dragon.address_to_cell(workspace:current_character:progress, dragon.ascii_character.byte_size)(character, advancement)

    [ if whitespace, go back to beginning of loop ]
    dragon.integer.within_range(whitespace:start, character, whitespace:end, dragon.never)(whitespace_detected)
    @whitespace whitespace_detected = {
        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ jump ]
        dragon.jump(whitespace_detected, @lexing.loop.start)()
    }

    [ otherwise, detect lexling ]
    [ detect left_curly_bracket ]
    dragon.integer.within_range(left_curly_bracket, character, left_curly_bracket, dragon.never)(detected)
    @check.left_curly_bracket detected = {
        [ create lexling ]
        dragon.pack(workspace:current_character:progress, workspace:current_character:progress)(text !dragon.buffer)
        dragon.pack(text, workspace:lexling.types:left_curly_bracket, null_location)(lexling !tools.json.lexling)

        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ append lexling ]
        dragon.list.append.structure(workspace:lexlings:list, lexling)()

        [ jump to loop start ]
        dragon.jump(dragon.always, @lexing.loop.start)()
    }

    [ detect right_curly_bracket ]
    dragon.integer.within_range(right_curly_bracket, character, right_curly_bracket, dragon.never)(detected)
    @check.right_curly_bracket detected = {
        [ create lexling ]
        dragon.pack(workspace:current_character:progress, workspace:current_character:progress)(text !dragon.buffer)
        dragon.pack(text, workspace:lexling.types:right_curly_bracket, null_location)(lexling !tools.json.lexling)

        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ append lexling ]
        dragon.list.append.structure(workspace:lexlings:list, lexling)()

        [ jump to loop start ]
        dragon.jump(dragon.always, @lexing.loop.start)()
    }

    [ detect left_square_bracket ]
    dragon.integer.within_range(left_square_bracket, character, left_square_bracket, dragon.never)(detected)
    @check.left_square_bracket detected = {
        [ create lexling ]
        dragon.pack(workspace:current_character:progress, workspace:current_character:progress)(text !dragon.buffer)
        dragon.pack(text, workspace:lexling.types:left_square_bracket, null_location)(lexling !tools.json.lexling)

        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ append lexling ]
        dragon.list.append.structure(workspace:lexlings:list, lexling)()

        [ jump to loop start ]
        dragon.jump(dragon.always, @lexing.loop.start)()
    }

    [ detect right_square_bracket ]
    dragon.integer.within_range(right_square_bracket, character, right_square_bracket, dragon.never)(detected)
    @check.right_square_bracket detected = {
        [ create lexling ]
        dragon.pack(workspace:current_character:progress, workspace:current_character:progress)(text !dragon.buffer)
        dragon.pack(text, workspace:lexling.types:right_square_bracket, null_location)(lexling !tools.json.lexling)

        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ append lexling ]
        dragon.list.append.structure(workspace:lexlings:list, lexling)()

        [ jump to loop start ]
        dragon.jump(dragon.always, @lexing.loop.start)()
    }
    
    [ detect comma ]
    dragon.integer.within_range(comma, character, comma, dragon.never)(detected)
    @check.comma detected = {
        [ create lexling ]
        dragon.pack(workspace:current_character:progress, workspace:current_character:progress)(text !dragon.buffer)
        dragon.pack(text, workspace:lexling.types:comma, null_location)(lexling !tools.json.lexling)

        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ append lexling ]
        dragon.list.append.structure(workspace:lexlings:list, lexling)()

        [ jump to loop start ]
        dragon.jump(dragon.always, @lexing.loop.start)()
    }
    
    [ detect colon ]
    dragon.integer.within_range(colon, character, colon, dragon.never)(detected)
    @check.colon detected = {
        [ create lexling ]
        dragon.pack(workspace:current_character:progress, workspace:current_character:progress)(text !dragon.buffer)
        dragon.pack(text, workspace:lexling.types:colon, null_location)(lexling !tools.json.lexling)

        [ next character ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ append lexling ]
        dragon.list.append.structure(workspace:lexlings:list, lexling)()

        [ jump to loop start ]
        dragon.jump(dragon.always, @lexing.loop.start)()
    }

    [ detect string ]
    dragon.integer.within_range(double_quote, character, double_quote, dragon.never)(detected)
    @check.double_quote detected = {
        [ setup lexling start ]
        dragon.copy(workspace:current_character:progress)(text.start)

        [ advance progress past starting quote ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ setup search for double quote loop ]
        @string.loop.start

        [ check for end of characters ]
        dragon.current.within_range(workspace:current_character, dragon.always)(ran_out_of_characters)
        @string.ran_out_of_characters ran_out_of_characters = {
            [ setup error ]
            dragon.set("Lexing Error: A string ran out of characters.")(error_message)
            tools.json.compile.raise_error(workspace, error_message)(workspace)

            [ exit loop ]
            dragon.jump(dragon.always, @lexing.loop.exit)()
        }

        [ check for ending quote ]
        dragon.address_to_cell(workspace:current_character:progress, dragon.ascii_character.byte_size)(character, advancement)
        dragon.integer.within_range(double_quote, character, double_quote, dragon.never)(detected)
        @check.string.end_quote detected = {
            [ setup lexling ]
            dragon.copy(workspace:current_character:progress)(text.end)
            dragon.pack(text.start, text.end)(text !dragon.buffer)
            dragon.pack(text, workspace:lexling.types:string, null_location)(lexling !tools.json.lexling)

            [ next character ]
            dragon.copy(advancement)(workspace:current_character:progress)

            [ append lexling ]
            dragon.list.append.structure(workspace:lexlings:list, lexling)()

            [ jump to loop start ]
            dragon.jump(dragon.always, @lexing.loop.start)()
        }

        [ not detected, go to loop start to check next character ]
        dragon.copy(advancement)(workspace:current_character:progress)
        dragon.jump(dragon.always, @string.loop.start)()
    }

    [ detect integer ]
    dragon.integer.within_range(decimal_digits.start, character, decimal_digits.end, dragon.never)(detected)
    @check.decimal_digit detected = {
        [ setup lexling start ]
        dragon.copy(workspace:current_character:progress)(text.start)

        [ advance progress past starting digit ]
        dragon.copy(advancement)(workspace:current_character:progress)

        [ setup search for decimal digits loop ]
        @decimal_digit.loop.start

        [ check for end of characters ]
        dragon.current.within_range(workspace:current_character, dragon.always)(ran_out_of_characters)
        @decimal_digit.ran_out_of_characters ran_out_of_characters = {
            [ exit loop ]
            dragon.jump(dragon.always, @lexing.decimal_digit.finished)()
        }

        [ check for next character ]
        dragon.address_to_cell(workspace:current_character:progress, dragon.ascii_character.byte_size)(character, advancement)
        dragon.integer.within_range(decimal_digits.start, character, decimal_digits.end, dragon.never)(detected)
        @decimal_digits.next_character detected = {
            [ next character ]
            dragon.copy(advancement)(workspace:current_character:progress)

            [ jump to loop start ]
            dragon.jump(dragon.always, @decimal_digit.loop.start)()
        }

        [ no more characters detected ]
        [ setup offset ]
        @lexing.decimal_digit.finished

        [ setup lexling ]
        dragon.integer.subtract(workspace:current_character:progress, dragon.constant.1)(text.end)
        dragon.pack(text.start, text.end)(text !dragon.buffer)
        dragon.pack(text, workspace:lexling.types:integer, null_location)(lexling !tools.json.lexling)

        [ append lexling ]
        dragon.list.append.structure(workspace:lexlings:list, lexling)()

        [ jump to start of lexing loop ]
        dragon.jump(dragon.always, @lexing.loop.start)()
    }

    [ if nothing was matched, set error ]
    dragon.set("Lexing Error: No lexling was matched.")(error_message)
    tools.json.compile.raise_error(workspace, error_message)(workspace)

    [ setup lexing loop end ]
    @lexing.loop.exit

    [ setup end of file lexling ]
    dragon.set("[end_of_file]")(end_of_file_message)
    dragon.pack(end_of_file_message, workspace:lexling.types:end_of_file, null_location)(lexling !tools.json.lexling)
    dragon.list.append.structure(workspace:lexlings:list, lexling)()
}

[ print lexling list ]
tools.json.compile.lex.print(workspace !tools.json.workspace)() = {
    [ setup variables ]
    dragon.pack.null()(lexling.dummy !tools.json.lexling)
    dragon.structure.byte_size(lexling.dummy)(lexling.size)

    [ setup current ]
    dragon.list.calculate.content_buffer(workspace:lexlings:list)(content)
    dragon.pack(content, content:start)(current !dragon.current)

    [ setup loop start ]
    @loop_start

    [ check for end of current ]
    dragon.current.within_range(current, dragon.always)(should_quit)
    dragon.jump(should_quit, @loop_exit)()

    [ get lexling ]
    dragon.buffer.calculate.end_address(current:progress, lexling.size)(structure.end)
    dragon.pack(current:progress, structure.end)(lexling_source !dragon.buffer)
    dragon.buffer_to_structure(lexling_source)(lexling !tools.json.lexling)

    [ next lexling ]
    dragon.integer.add(current:progress, lexling.size)(current:progress)

    [ print lexling ]
    tools.json.lexling.print(lexling)()
    dragon.print.new_line()()

    [ jump to start of loop ]
    dragon.jump(dragon.always, @loop_start)()

    [ setup loop end ]
    @loop_exit
}


[
[
    Parsing
]
[ parslings ]
!tools.json.parslings
(
    list !dragon.list [ !tools.json.parsling ]
)

[ parsling ]
!tools.json.parsling
(
    [ header ]
    name !dragon.buffer,
    type !dragon.cell,

    [ data ]
    value.integer !dragon.cell,
    value.string !dragon.buffer,
    value.structure !tools.json.parsling.index,
    value.array !tools.json.parsling.index,

    [ next parsling ]
    next !tools.json.parsling.index
)

[ parsling index ]
!tools.json.parsling.index
(
    index !dragon.cell
)

[ parsling types ]
!tools.json.parsling.types
(
    object !dragon.cell, [ optionally named ]
    array !dragon.cell, [ named ]
    string !dragon.cell, [ named ]
    integer !dragon.cell, [ named ]
    boolean_false !dragon.cell, [ named ]
    boolean_true !dragon.cell, [ named ]
    null !dragon.cell [ named ]
)

[ setup parsling types ]
tools.json.parsling.types.setup()(types !tools.json.parsling.types) = {
    [ setup data ]
    dragon.set(dragon.integer.0)(types:object)
    dragon.set(dragon.integer.1)(types:array)
    dragon.set(dragon.integer.2)(types:string)
    dragon.set(dragon.integer.3)(types:integer)
    dragon.set(dragon.integer.4)(types:boolean_false)
    dragon.set(dragon.integer.5)(types:boolean_true)
    dragon.set(dragon.integer.6)(types:null)
}

[ parse json lexlings ]
tools.json.compile.parse(workspace !tools.json.workspace)(workspace !tools.json.workspace) = {
    [ open parslings ]
    dragon.pack.null()(empty_parsling !tools.json.parsling)
    dragon.structure.byte_size(empty_parsling)(json_parsling.size)
    dragon.integer.multiply(json_parsling.size, dragon.constant.64)(increase)
    dragon.list.open(increase)(workspace:parslings:list)

    [ setup current ]
    dragon.list.calculate.content_buffer(workspace:lexlings:list)(lexlings_buffer)
    dragon.pack(lexlings_buffer, lexlings_buffer:start)(workspace:current_lexling !dragon.current)

    [ parse root object ]
    tools.json.compile.parse.object(workspace)(workspace, id)
}

[ parse object ]
tools.json.compile.parse.object(workspace !tools.json.workspace)(workspace !tools.json.workspace, id !tools.json.parsling.index) = {
    [ parse contents ]
    [ check for opener ]
    tools.json.compile.parse.check_current_lexling.by_type(workspace, workspace:lexling.types:left_curly_bracket, dragon.true)(valid)
    dragon.integer.xor(valid, dragon.constant.1)(invalid)
    @missing_opener invalid = {
        [ setup error ]
        dragon.set("")(message)
        dragon.pack(dragon.true, message)(workspace:error !tools.error)
    }
}

[ parse header ]
tools.json.compile.parse.header(workspace !tools.json.workspace)(workspace !tools.json.workspace) = {
    
}

[ check lexling ]
tools.json.compile.parse.check_current_lexling.by_type(workspace !tools.json.workspace, expected_type !dragon.cell, advance !dragon.cell)(validity !dragon.cell) = {
    [ check for valid lexling range ]
    dragon.current.within_range(workspace:current_lexling, dragon.true)(out_of_range)
    @out_of_range out_of_range = {
        [ set validity ]
        dragon.copy(dragon.false)(validity)

        [ exit function ]
        dragon.jump(dragon.always, @exit)()
    }

    [ setup lexling read buffer ]
    dragon.pack.null()(dummy !tools.json.lexling)
    dragon.structure.byte_size(dummy)(lexling.byte_size)
    dragon.buffer.calculate.end_address(workspace:current_lexling:progress, lexling.byte_size)(lexling.end)
    dragon.pack(workspace:current_lexling:progress, lexling.end)(lexling.source !dragon.buffer)

    [ get lexling ]
    dragon.buffer_to_structure(lexling.source)(lexling !tools.json.lexling)

    [ check for lexling type ]
    dragon.integer.within_range(expected_type, lexling:type, expected_type, dragon.always)(invalid)
    @invalid invalid = {
        [ set validity ]
        dragon.copy(dragon.false)(validity)

        [ exit function ]
        dragon.jump(dragon.true, @exit)()
    }

    [ set validity ]
    dragon.copy(dragon.true)(validity)

    [ exit function ]
    @exit
} ]
