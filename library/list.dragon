[ calculate buffer size ]
tools.buffer.calculate.size(buffer !dragon.buffer)(size !dragon.cell) = {
    [ subtract pointers ]
    dragon.integer.subtract(buffer:end, buffer:start)(size)

    [ adjust size from pointers to length ]
    dragon.integer.add(size, dragon.constant.1)(size)
}

[ calculate buffer end address ]
tools.buffer.calculate.end_address(start !dragon.cell, length !dragon.cell)(end !dragon.cell) = {
    [ add pointer and length ]
    dragon.integer.add(start, length)(end)

    [ adjust pointer ]
    dragon.integer.subtract(end, dragon.constant.1)(end)
}

[ calculate split pointers ]
tools.buffer.calculate.split_pointers(source !dragon.buffer, index !dragon.cell)(left !dragon.buffer, right !dragon.buffer) = {
    [ setup ready data ]
    dragon.copy(source:start)(left:start)
    dragon.copy(source:end)(right:end)

    [ calculate middle ]
    dragon.integer.add(source:start, index)(left:end)
    dragon.integer.add(left:end, dragon.constant.1)(right:start)
}

[ calculate insertion pointers ]
tools.buffer.calculate.insertion_pointers(content !dragon.buffer, data !dragon.buffer, index !dragon.cell)(left !dragon.buffer, middle !dragon.buffer, right !dragon.buffer) = {
    [ calculate lengths of inputs ]
    tools.buffer.calculate.size(content)(content.size)
    tools.buffer.calculate.size(data)(data.size)

    [ setup ready data ]
    dragon.copy(content:start)(left:start)
    dragon.copy(content:end)(right:end)

    [ setup left pointers ]
    tools.buffer.calculate.end_address(content:start, data.size)(left:end)
    
    [ setup middle pointers ]
    dragon.integer.add(left:end, dragon.constant.1)(middle:start)
    tools.buffer.calculate.end_address(middle:start, data.size)(middle:end)

    [ setup right pointers ]
    dragon.integer.add(middle:end, dragon.constant.1)(right:start)
}

[ print list ]
tools.list.print(list !dragon.list)() = {
    dragon.set("List:")(message)
    dragon.print.buffer_as_string(message)()

    [ print variables ]
    dragon.print.tabs(dragon.constant.1)()
    dragon.print.debug_cell(list:allocation:start)()
    dragon.print.new_line()()
    dragon.print.tabs(dragon.constant.1)()
    dragon.print.debug_cell(list:allocation:end)()
    dragon.print.new_line()()
    dragon.print.tabs(dragon.constant.1)()
    dragon.print.debug_cell(list:content:start)()
    dragon.print.new_line()()
    dragon.print.tabs(dragon.constant.1)()
    dragon.print.debug_cell(list:content:end)()
    dragon.print.new_line()()
    dragon.print.tabs(dragon.constant.1)()
    dragon.print.debug_cell(list:increase)()
    dragon.print.new_line()()
}

[ when inserting a buffer, calculate the new allocation size ]
tools.list.insert.buffer.calculate_allocation_size(list.in !dragon.list)(list.out !dragon.list) = {
    
}

[ insert buffer ]
tools.list.insert.buffer(list !dragon.list, data !dragon.buffer, index !dragon.cell)(list !dragon.list) = {
    [ calculate buffer sizes ]
    tools.buffer.calculate.size(list:allocation)(old_allocation.size)
    tools.buffer.calculate.size(list:content)(old_content.size)
    tools.buffer.calculate.size(data)(data.size)

    [ check for empty buffer ]
    dragon.integer.within_range(dragon.constant.0, list:content:end, list:content:start, dragon.never)(content_is_empty)
    dragon.bits.xor(dragon.constant.1, content_is_empty)(content_is_not_empty)

    [ if content is empty ]
    @empty_content content_is_empty = {
        [ check for invalid insertion index ]
        dragon.integer.within_range(dragon.constant.0, index, dragon.constant.0, dragon.never)(invalid_insertion_index)

        [ exit if invalid insertion index ]
        dragon.jump(invalid_insertion_index, @exit)()

        [ otherwise, insert data ]
        tools.list.insert.buffer.calculate_allocation_size(list)(list)
    }

    [ if content is not empty ]
    @not_empty_content content_is_not_empty = {

    }

    [ exit ]
    @exit
}

[ debug functions ]
tools.list.print.buffer_range(buffer !dragon.buffer)() = {
    dragon.set("[ ")(message)
    dragon.print.buffer_as_string(message)()
    dragon.print.debug_cell(buffer:start)()
    dragon.set(" : ")(message)
    dragon.print.buffer_as_string(message)()
    dragon.print.debug_cell(buffer:end)()
    dragon.set(" (")(message)
    dragon.print.buffer_as_string(message)()
    tools.buffer.calculate.size(buffer)(size)
    dragon.print.debug_cell(size)()
    dragon.set(") ]")(message)
    dragon.print.buffer_as_string(message)()
}
tools.list.print.buffer_copy_data(source !dragon.buffer, destination !dragon.buffer)() = {
    tools.list.print.buffer_range(source)()
    tools.list.print.buffer_range(destination)()
    dragon.print.new_line()()
}
