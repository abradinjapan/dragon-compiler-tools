[ Notes ]
[
    Six buffers are required:
        1) The source data.
        2) The source data's destination.
        2) The source bottom.
        3) The destination bottom.
        4) The source top.
        5) The destination bottom.
    The bottoms and tops will be copied together and the data will be copied to the middle.
    However, the buffer that contains the original list might need to be reallocated.
        So depending on whether or not the allocation is reallocated determines how the data should be copied.
    Also if the list is empty, then a simple copy is all that is needed.
]

[ bank structure ]
!tools.bank(
    allocation !dragon.buffer,
    length !dragon.cell,
    increase !dragon.cell
)

[ open bank ]
tools.bank.open(increase !dragon.cell)(bank !tools.bank) = {
    [ open allocation ]
    dragon.buffer.request(increase)(bank:allocation)

    [ setup variables ]
    dragon.set(dragon.integer.0)(bank:length)
    dragon.copy(increase)(bank:increase)
}

[ close a bank ]
tools.bank.close(bank !tools.bank)() = {
    [ close allocation ]
    dragon.buffer.return(bank:allocation)()
}

[ print a bank ]
tools.bank.print(bank !tools.bank)() = {
    [ setup strings ]
    dragon.set("[ ")(header)
    dragon.set(", ")(separator)
    dragon.set(" ]")(footer)

    [ print bank ]
    dragon.print.buffer_as_string(header)()
    dragon.print.debug_cell(bank:allocation:start)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.debug_cell(bank:allocation:end)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.debug_cell(bank:length)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.debug_cell(bank:increase)()
    dragon.print.buffer_as_string(footer)()
}

[ append buffer to bank ]
tools.bank.append(bank !tools.bank, data !dragon.buffer)(bank !tools.bank) = {
    [ calculate buffer sizes ]
    dragon.buffer.calculate.length(data)(data.length)
    dragon.buffer.calculate.length(bank:allocation)(allocation.length)
    dragon.integer.add(bank:length, data.length)(required_length)

    [ allocate new buffer if necessary ]
    dragon.integer.within_range(dragon.constant.0, required_length, allocation.length, dragon.always)(should_reallocate)
    @reallocate should_reallocate = {
        [ calculate new required allocation size ]
        dragon.integer.divide(required_length, bank:increase)(chunk_count)
        dragon.integer.add(chunk_count, dragon.constant.1)(chunk_count)
        dragon.integer.multiply(chunk_count, bank:increase)(new_allocation.size)

        [ allocate ]
        dragon.buffer.request(new_allocation.size)(new_allocation)

        [ calculate old data copy buffers ]
        dragon.buffer.calculate.end_address(bank:allocation:start, bank:length)(old_content.end)
        dragon.pack(bank:allocation:start, old_content.end)(old_content.slice !dragon.buffer)
        
        dragon.buffer.calculate.end_address(new_allocation:start, bank:length)(new_content.end)
        dragon.pack(new_allocation:start, new_content.end)(new_content.slice !dragon.buffer)

        [ copy old data ]
        dragon.buffer.copy.low_to_high(old_content.slice, new_content.slice)()

        [ delete old allocation ]
        dragon.buffer.return(bank:allocation)()

        [ setup new allocation ]
        dragon.copy(new_allocation)(bank:allocation)
    }

    [ calculate appending addresses ]
    dragon.integer.add(bank:allocation:start, bank:length)(destination.start)
    dragon.buffer.calculate.end_address(destination.start, data.length)(destination.end)
    dragon.pack(destination.start, destination.end)(destination !dragon.buffer)

    [ write data to buffer ]
    dragon.buffer.copy.low_to_high(data, destination)()

    [ update bank length ]
    dragon.copy(required_length)(bank:length)
}

[
[ bank data ]
!tools.bank.data(
    [ is reallocating ]
    should_reallocate !dragon.cell,

    [ allocations ]
    source_allocation !dragon.buffer,
    destination_allocation !dragon.buffer,

    [ source slices ]
    source_bottom_slice !dragon.buffer,
    source_middle_slice !dragon.buffer,
    source_top_slice !dragon.buffer,

    [ destination slices ]
    destination_bottom_slice !dragon.buffer,
    destination_middle_slice !dragon.buffer,
    destination_top_slice !dragon.buffer,

    [ lengths ]
    bottom_length !dragon.cell,
    middle_length !dragon.cell,
    top_length !dragon.cell
)

[ calculate bank insertion data ]
tools.bank.calculate.insertion_data(bank !tools.bank, data !dragon.buffer, index !dragon.cell)(output !tools.bank.data) = {
    [ check if reallocating ]
    
}

[ insert buffer into bank ]
tools.bank.insert(bank !tools.bank, data !dragon.buffer, index !dragon.cell)(bank !tools.bank) = {
    [ check for buffer needing to be resized ]
    @check.resize dragon.always = {
        [ calculate required space ]
        dragon.buffer.calculate.length(bank:allocation)(old_allocation.size)
        dragon.buffer.calculate.length(data)(data.size)
        dragon.integer.add(data.size, bank:length)(required_length)

        [ check for reallocating ]
        dragon.integer.within_range(dragon.constant.0, required_length, old_allocation.size, dragon.always)(should_reallocate)
        dragon.bits.xor(should_reallocate, dragon.constant.1)(shouldnt_reallocate)
    }

    [ if shouldnt reallocate ]
    @normal_insert shouldnt_reallocate = {
        [ calculate read top slices ]
        dragon.integer.add(bank:allocation:start, index)(source_top_start)
        dragon.buffer.calculate.end_address(bank:allocation:start, bank:length)(source_top_end)
        dragon.pack(source_top_start, source_top_end)(source_top_slice !dragon.buffer)

        [ calculate write middle slices ]
        dragon.integer.add(bank:allocation:start, data.size)(destination_middle_start)
        dragon.buffer.calculate.end_address(destination_middle_start, data.size)(destination_middle_end)
        dragon.pack(destination_middle_start, destination_middle_end)(destination_middle_slice !dragon.buffer)

        [ calculate write top slices ]
        dragon.integer.add(destination_middle_end, dragon.constant.1)(destination_top_start)
        dragon.buffer.calculate.end_address(destination_top_start, destination.length)(destination_top_end)
        dragon.pack(destination_top_start, destination_top_end)(destination_top_slice !dragon.buffer)

        [ move data at end of buffer upwards ]
        [ DEBUG ] tools.bank.print.debug(source_top_slice)()
        [ DEBUG ] tools.bank.print.debug(destination_top_slice)()
        [ DEBUG ] dragon.print.new_line()()
        dragon.buffer.copy.high_to_low(source_top_slice, destination_top_slice)()

        [ copy data into insertion index ]
        dragon.buffer.copy.low_to_high(data, destination_middle_slice)()

        [ update bank length ]
        dragon.copy(required_length)(bank:length)
    }

    [ if should reallocate ]
    @reallocation_insert should_reallocate = {
        
    }
    
    [ exit ]
    @exit
}
]

[ debug ]
tools.bank.print.debug(buffer !dragon.buffer)() = {
    [ setup strings ]
    dragon.set("[ ")(header)
    dragon.set(", ")(separator)
    dragon.set(" ]")(footer)

    [ calculate length ]
    dragon.buffer.calculate.length(buffer)(length)

    [ print data ]
    dragon.print.buffer_as_string(header)()
    dragon.print.debug_cell(buffer:start)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.debug_cell(buffer:end)()
    dragon.print.buffer_as_string(separator)()
    dragon.print.debug_cell(length)()
    dragon.print.buffer_as_string(footer)()
}
