[ check if two buffer's contents are equivalent ]
tools.check.buffer_contents_are_equal(a !dragon.buffer, b !dragon.buffer)(equivalent !dragon.cell) = {
    [ calculate lengths ]
    dragon.buffer.calculate.length(a)(a.length)
    dragon.buffer.calculate.length(b)(b.length)

    [ check length equivalency ]
    dragon.integer.within_range(a.length, b.length, a.length, dragon.always)(invalid)
    @invalid_lengths invalid = {
        [ set equivalent ]
        dragon.copy(dragon.false)(equivalent)

        [ return ]
        dragon.jump(dragon.always, @exit)()
    }

    [ check content equivalency ]
    [ setup currents ]
    dragon.pack(a, a:start)(a.current !dragon.current)
    dragon.pack(b, b:start)(b.current !dragon.current)

    [ setup loop start ]
    @check_loop_start

    [ check currents ]
    dragon.current.within_range(a.current, dragon.always)(a.current.invalid)
    @check_currents a.current.invalid = {
        [ not an error, only reachable by equivalent string ]
        dragon.copy(dragon.true)(equivalent)

        [ return ]
        dragon.jump(dragon.always, @exit)()
    }

    [ get characters from current ]
    dragon.address_to_cell(a.current:progress, dragon.ascii_character.byte_size)(a.character, a.current:progress)
    dragon.address_to_cell(b.current:progress, dragon.ascii_character.byte_size)(b.character, b.current:progress)

    [ check for character equivalency ]
    dragon.integer.within_range(a.character, b.character, a.character, dragon.always)(not_a_match)
    @not_a_match not_a_match = {
        [ set not equivalent ]
        dragon.copy(dragon.false)(equivalent)

        [ return ]
        dragon.jump(dragon.always, @exit)()
    }

    [ jump to loop start ]
    dragon.jump(dragon.always, @check_loop_start)()

    [ exit offset ]
    @exit
}
